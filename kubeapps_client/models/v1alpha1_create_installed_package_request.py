# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1CreateInstalledPackageRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_package_ref': 'V1alpha1AvailablePackageReference',
        'target_context': 'V1alpha1Context',
        'name': 'str',
        'pkg_version_reference': 'V1alpha1VersionReference',
        'values': 'str',
        'reconciliation_options': 'V1alpha1ReconciliationOptions'
    }

    attribute_map = {
        'available_package_ref': 'availablePackageRef',
        'target_context': 'targetContext',
        'name': 'name',
        'pkg_version_reference': 'pkgVersionReference',
        'values': 'values',
        'reconciliation_options': 'reconciliationOptions'
    }

    def __init__(self, available_package_ref=None, target_context=None, name=None, pkg_version_reference=None, values=None, reconciliation_options=None):  # noqa: E501
        """V1alpha1CreateInstalledPackageRequest - a model defined in Swagger"""  # noqa: E501
        self._available_package_ref = None
        self._target_context = None
        self._name = None
        self._pkg_version_reference = None
        self._values = None
        self._reconciliation_options = None
        self.discriminator = None
        if available_package_ref is not None:
            self.available_package_ref = available_package_ref
        if target_context is not None:
            self.target_context = target_context
        if name is not None:
            self.name = name
        if pkg_version_reference is not None:
            self.pkg_version_reference = pkg_version_reference
        if values is not None:
            self.values = values
        if reconciliation_options is not None:
            self.reconciliation_options = reconciliation_options

    @property
    def available_package_ref(self):
        """Gets the available_package_ref of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501


        :return: The available_package_ref of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: V1alpha1AvailablePackageReference
        """
        return self._available_package_ref

    @available_package_ref.setter
    def available_package_ref(self, available_package_ref):
        """Sets the available_package_ref of this V1alpha1CreateInstalledPackageRequest.


        :param available_package_ref: The available_package_ref of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: V1alpha1AvailablePackageReference
        """

        self._available_package_ref = available_package_ref

    @property
    def target_context(self):
        """Gets the target_context of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501


        :return: The target_context of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: V1alpha1Context
        """
        return self._target_context

    @target_context.setter
    def target_context(self, target_context):
        """Sets the target_context of this V1alpha1CreateInstalledPackageRequest.


        :param target_context: The target_context of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: V1alpha1Context
        """

        self._target_context = target_context

    @property
    def name(self):
        """Gets the name of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501


        :return: The name of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1CreateInstalledPackageRequest.


        :param name: The name of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pkg_version_reference(self):
        """Gets the pkg_version_reference of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501


        :return: The pkg_version_reference of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: V1alpha1VersionReference
        """
        return self._pkg_version_reference

    @pkg_version_reference.setter
    def pkg_version_reference(self, pkg_version_reference):
        """Sets the pkg_version_reference of this V1alpha1CreateInstalledPackageRequest.


        :param pkg_version_reference: The pkg_version_reference of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: V1alpha1VersionReference
        """

        self._pkg_version_reference = pkg_version_reference

    @property
    def values(self):
        """Gets the values of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501

        An optional serialized values string to be included when templating a package in the format expected by the plugin. Included when the backend format doesn't use secrets or configmaps for values or supports both. These values are layered on top of any values refs above, when relevant.  # noqa: E501

        :return: The values of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: str
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this V1alpha1CreateInstalledPackageRequest.

        An optional serialized values string to be included when templating a package in the format expected by the plugin. Included when the backend format doesn't use secrets or configmaps for values or supports both. These values are layered on top of any values refs above, when relevant.  # noqa: E501

        :param values: The values of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: str
        """

        self._values = values

    @property
    def reconciliation_options(self):
        """Gets the reconciliation_options of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501


        :return: The reconciliation_options of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :rtype: V1alpha1ReconciliationOptions
        """
        return self._reconciliation_options

    @reconciliation_options.setter
    def reconciliation_options(self, reconciliation_options):
        """Sets the reconciliation_options of this V1alpha1CreateInstalledPackageRequest.


        :param reconciliation_options: The reconciliation_options of this V1alpha1CreateInstalledPackageRequest.  # noqa: E501
        :type: V1alpha1ReconciliationOptions
        """

        self._reconciliation_options = reconciliation_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1CreateInstalledPackageRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1CreateInstalledPackageRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

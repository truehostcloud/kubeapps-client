# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1ResourceRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'kind': 'str',
        'name': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'kind': 'kind',
        'name': 'name',
        'namespace': 'namespace'
    }

    def __init__(self, api_version=None, kind=None, name=None, namespace=None):  # noqa: E501
        """V1alpha1ResourceRef - a model defined in Swagger"""  # noqa: E501
        self._api_version = None
        self._kind = None
        self._name = None
        self._namespace = None
        self.discriminator = None
        if api_version is not None:
            self.api_version = api_version
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace

    @property
    def api_version(self):
        """Gets the api_version of this V1alpha1ResourceRef.  # noqa: E501

        The APIVersion directly from the resource has the group and version, eg. \"apps/v1\" or just the version for core resources.  # noqa: E501

        :return: The api_version of this V1alpha1ResourceRef.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this V1alpha1ResourceRef.

        The APIVersion directly from the resource has the group and version, eg. \"apps/v1\" or just the version for core resources.  # noqa: E501

        :param api_version: The api_version of this V1alpha1ResourceRef.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def kind(self):
        """Gets the kind of this V1alpha1ResourceRef.  # noqa: E501

        The Kind directly from the templated manifest. Together with the APIVersion this forms the GroupVersionKind.  # noqa: E501

        :return: The kind of this V1alpha1ResourceRef.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1alpha1ResourceRef.

        The Kind directly from the templated manifest. Together with the APIVersion this forms the GroupVersionKind.  # noqa: E501

        :param kind: The kind of this V1alpha1ResourceRef.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this V1alpha1ResourceRef.  # noqa: E501

        The name of the specific resource in the context of the installed package.  # noqa: E501

        :return: The name of this V1alpha1ResourceRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1ResourceRef.

        The name of the specific resource in the context of the installed package.  # noqa: E501

        :param name: The name of this V1alpha1ResourceRef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this V1alpha1ResourceRef.  # noqa: E501

        The namespace of the specific resource in the context of the installed package. In most cases this will be identical to the namespace of the installed package. Exceptions will be non-namespaced resources and packages that install resources in other namespaces for special reasons.  # noqa: E501

        :return: The namespace of this V1alpha1ResourceRef.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1alpha1ResourceRef.

        The namespace of the specific resource in the context of the installed package. In most cases this will be identical to the namespace of the installed package. Exceptions will be non-namespaced resources and packages that install resources in other namespaces for special reasons.  # noqa: E501

        :param namespace: The namespace of this V1alpha1ResourceRef.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ResourceRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ResourceRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

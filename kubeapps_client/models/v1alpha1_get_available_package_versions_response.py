# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1GetAvailablePackageVersionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_app_versions': 'list[V1alpha1PackageAppVersion]'
    }

    attribute_map = {
        'package_app_versions': 'packageAppVersions'
    }

    def __init__(self, package_app_versions=None):  # noqa: E501
        """V1alpha1GetAvailablePackageVersionsResponse - a model defined in Swagger"""  # noqa: E501
        self._package_app_versions = None
        self.discriminator = None
        if package_app_versions is not None:
            self.package_app_versions = package_app_versions

    @property
    def package_app_versions(self):
        """Gets the package_app_versions of this V1alpha1GetAvailablePackageVersionsResponse.  # noqa: E501

        By default (when version_query is empty or ignored) the response should contain an ordered summary of versions including the most recent three patch versions of the most recent three minor versions of the most recent three major versions when available, something like: [   { pkg_version: \"10.3.19\", app_version: \"2.16.8\" },   { pkg_version: \"10.3.18\", app_version: \"2.16.8\" },   { pkg_version: \"10.3.17\", app_version: \"2.16.7\" },   { pkg_version: \"10.2.6\", app_version: \"2.15.3\" },   { pkg_version: \"10.2.5\", app_version: \"2.15.2\" },   { pkg_version: \"10.2.4\", app_version: \"2.15.2\" },   { pkg_version: \"10.1.8\", app_version: \"2.13.5\" },   { pkg_version: \"10.1.7\", app_version: \"2.13.5\" },   { pkg_version: \"10.1.6\", app_version: \"2.13.5\" },   { pkg_version: \"9.5.4\", app_version: \"2.8.9\" },   ...   { pkg_version: \"8.2.5\", app_version: \"1.19.5\" },   ... ] If a version_query is present and the plugin chooses to support it, the full history of versions matching the version query should be returned.  # noqa: E501

        :return: The package_app_versions of this V1alpha1GetAvailablePackageVersionsResponse.  # noqa: E501
        :rtype: list[V1alpha1PackageAppVersion]
        """
        return self._package_app_versions

    @package_app_versions.setter
    def package_app_versions(self, package_app_versions):
        """Sets the package_app_versions of this V1alpha1GetAvailablePackageVersionsResponse.

        By default (when version_query is empty or ignored) the response should contain an ordered summary of versions including the most recent three patch versions of the most recent three minor versions of the most recent three major versions when available, something like: [   { pkg_version: \"10.3.19\", app_version: \"2.16.8\" },   { pkg_version: \"10.3.18\", app_version: \"2.16.8\" },   { pkg_version: \"10.3.17\", app_version: \"2.16.7\" },   { pkg_version: \"10.2.6\", app_version: \"2.15.3\" },   { pkg_version: \"10.2.5\", app_version: \"2.15.2\" },   { pkg_version: \"10.2.4\", app_version: \"2.15.2\" },   { pkg_version: \"10.1.8\", app_version: \"2.13.5\" },   { pkg_version: \"10.1.7\", app_version: \"2.13.5\" },   { pkg_version: \"10.1.6\", app_version: \"2.13.5\" },   { pkg_version: \"9.5.4\", app_version: \"2.8.9\" },   ...   { pkg_version: \"8.2.5\", app_version: \"1.19.5\" },   ... ] If a version_query is present and the plugin chooses to support it, the full history of versions matching the version query should be returned.  # noqa: E501

        :param package_app_versions: The package_app_versions of this V1alpha1GetAvailablePackageVersionsResponse.  # noqa: E501
        :type: list[V1alpha1PackageAppVersion]
        """

        self._package_app_versions = package_app_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1GetAvailablePackageVersionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1GetAvailablePackageVersionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'object',
        'plugin': 'object'
    }

    attribute_map = {
        'context': 'context',
        'plugin': 'plugin'
    }

    def __init__(self, context=None, plugin=None):  # noqa: E501
        """AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._plugin = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if plugin is not None:
            self.plugin = plugin

    @property
    def context(self):
        """Gets the context of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501

        The context (cluster/namespace) for the repository.  # noqa: E501

        :return: The context of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.

        The context (cluster/namespace) for the repository.  # noqa: E501

        :param context: The context of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501
        :type: object
        """

        self._context = context

    @property
    def plugin(self):
        """Gets the plugin of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501

        The plugin used to interact with this available package. This field should be omitted when the request is in the context of a specific plugin.  # noqa: E501

        :return: The plugin of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501
        :rtype: object
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.

        The plugin used to interact with this available package. This field should be omitted when the request is in the context of a specific plugin.  # noqa: E501

        :param plugin: The plugin of this AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField.  # noqa: E501
        :type: object
        """

        self._plugin = plugin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AReferenceUniquelyIdentifyingThePackageRepositoryBeingUpdatedTheOnlyRequiredField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

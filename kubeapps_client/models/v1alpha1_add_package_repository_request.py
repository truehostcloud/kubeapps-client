# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1AddPackageRepositoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'V1alpha1Context',
        'name': 'str',
        'description': 'str',
        'namespace_scoped': 'bool',
        'type': 'str',
        'url': 'str',
        'interval': 'str',
        'tls_config': 'V1alpha1PackageRepositoryTlsConfig',
        'auth': 'V1alpha1PackageRepositoryAuth',
        'plugin': 'V1alpha1Plugin',
        'custom_detail': 'ProtobufAny'
    }

    attribute_map = {
        'context': 'context',
        'name': 'name',
        'description': 'description',
        'namespace_scoped': 'namespaceScoped',
        'type': 'type',
        'url': 'url',
        'interval': 'interval',
        'tls_config': 'tlsConfig',
        'auth': 'auth',
        'plugin': 'plugin',
        'custom_detail': 'customDetail'
    }

    def __init__(self, context=None, name=None, description=None, namespace_scoped=None, type=None, url=None, interval=None, tls_config=None, auth=None, plugin=None, custom_detail=None):  # noqa: E501
        """V1alpha1AddPackageRepositoryRequest - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._name = None
        self._description = None
        self._namespace_scoped = None
        self._type = None
        self._url = None
        self._interval = None
        self._tls_config = None
        self._auth = None
        self._plugin = None
        self._custom_detail = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if namespace_scoped is not None:
            self.namespace_scoped = namespace_scoped
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if interval is not None:
            self.interval = interval
        if tls_config is not None:
            self.tls_config = tls_config
        if auth is not None:
            self.auth = auth
        if plugin is not None:
            self.plugin = plugin
        if custom_detail is not None:
            self.custom_detail = custom_detail

    @property
    def context(self):
        """Gets the context of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The context of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: V1alpha1Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this V1alpha1AddPackageRepositoryRequest.


        :param context: The context of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: V1alpha1Context
        """

        self._context = context

    @property
    def name(self):
        """Gets the name of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The name of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1AddPackageRepositoryRequest.


        :param name: The name of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The description of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1alpha1AddPackageRepositoryRequest.


        :param description: The description of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def namespace_scoped(self):
        """Gets the namespace_scoped of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The namespace_scoped of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._namespace_scoped

    @namespace_scoped.setter
    def namespace_scoped(self, namespace_scoped):
        """Sets the namespace_scoped of this V1alpha1AddPackageRepositoryRequest.


        :param namespace_scoped: The namespace_scoped of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: bool
        """

        self._namespace_scoped = namespace_scoped

    @property
    def type(self):
        """Gets the type of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The type of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1alpha1AddPackageRepositoryRequest.


        :param type: The type of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The url of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1alpha1AddPackageRepositoryRequest.


        :param url: The url of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def interval(self):
        """Gets the interval of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The interval of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this V1alpha1AddPackageRepositoryRequest.


        :param interval: The interval of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def tls_config(self):
        """Gets the tls_config of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The tls_config of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: V1alpha1PackageRepositoryTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this V1alpha1AddPackageRepositoryRequest.


        :param tls_config: The tls_config of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: V1alpha1PackageRepositoryTlsConfig
        """

        self._tls_config = tls_config

    @property
    def auth(self):
        """Gets the auth of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The auth of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: V1alpha1PackageRepositoryAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this V1alpha1AddPackageRepositoryRequest.


        :param auth: The auth of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: V1alpha1PackageRepositoryAuth
        """

        self._auth = auth

    @property
    def plugin(self):
        """Gets the plugin of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The plugin of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: V1alpha1Plugin
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this V1alpha1AddPackageRepositoryRequest.


        :param plugin: The plugin of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: V1alpha1Plugin
        """

        self._plugin = plugin

    @property
    def custom_detail(self):
        """Gets the custom_detail of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501


        :return: The custom_detail of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :rtype: ProtobufAny
        """
        return self._custom_detail

    @custom_detail.setter
    def custom_detail(self, custom_detail):
        """Sets the custom_detail of this V1alpha1AddPackageRepositoryRequest.


        :param custom_detail: The custom_detail of this V1alpha1AddPackageRepositoryRequest.  # noqa: E501
        :type: ProtobufAny
        """

        self._custom_detail = custom_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1AddPackageRepositoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1AddPackageRepositoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

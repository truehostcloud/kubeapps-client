# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kubeapps_client.api_client import ApiClient


class KappControllerPackagesServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def kapp_controller_packages_service_create_installed_package(self, body, **kwargs):  # noqa: E501
        """CreateInstalledPackage creates an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_create_installed_package(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1alpha1CreateInstalledPackageRequest body: Request for CreateInstalledPackage (required)
        :return: V1alpha1CreateInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_create_installed_package_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_create_installed_package_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_create_installed_package_with_http_info(self, body, **kwargs):  # noqa: E501
        """CreateInstalledPackage creates an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_create_installed_package_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1alpha1CreateInstalledPackageRequest body: Request for CreateInstalledPackage (required)
        :return: V1alpha1CreateInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_create_installed_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kapp_controller_packages_service_create_installed_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1CreateInstalledPackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_delete_installed_package(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """DeleteInstalledPackage deletes an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_delete_installed_package(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1DeleteInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_delete_installed_package_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_delete_installed_package_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_delete_installed_package_with_http_info(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """DeleteInstalledPackage deletes an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_delete_installed_package_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1DeleteInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['installed_package_ref_context_cluster', 'installed_package_ref_context_namespace', 'installed_package_ref_identifier', 'installed_package_ref_plugin_name', 'installed_package_ref_plugin_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_delete_installed_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'installed_package_ref_context_cluster' is set
        if ('installed_package_ref_context_cluster' not in params or
                params['installed_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_cluster` when calling `kapp_controller_packages_service_delete_installed_package`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_namespace' is set
        if ('installed_package_ref_context_namespace' not in params or
                params['installed_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_namespace` when calling `kapp_controller_packages_service_delete_installed_package`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_identifier' is set
        if ('installed_package_ref_identifier' not in params or
                params['installed_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_identifier` when calling `kapp_controller_packages_service_delete_installed_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installed_package_ref_context_cluster' in params:
            path_params['installedPackageRef.context.cluster'] = params['installed_package_ref_context_cluster']  # noqa: E501
        if 'installed_package_ref_context_namespace' in params:
            path_params['installedPackageRef.context.namespace'] = params['installed_package_ref_context_namespace']  # noqa: E501
        if 'installed_package_ref_identifier' in params:
            path_params['installedPackageRef.identifier'] = params['installed_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'installed_package_ref_plugin_name' in params:
            query_params.append(('installedPackageRef.plugin.name', params['installed_package_ref_plugin_name']))  # noqa: E501
        if 'installed_package_ref_plugin_version' in params:
            query_params.append(('installedPackageRef.plugin.version', params['installed_package_ref_plugin_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1DeleteInstalledPackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_available_package_detail(self, available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs):  # noqa: E501
        """GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_detail(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str available_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str available_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str available_package_ref_identifier: Available package identifier  The fully qualified identifier for the available package (ie. a unique name for the context). For some packaging systems (particularly those where an available package is backed by a CR) this will just be the name, but for others such as those where an available package is not backed by a CR (eg. standard helm) it may be necessary to include the repository in the name or even the repo namespace to ensure this is unique. For example two helm repositories can define an \"apache\" chart that is available globally, the names would need to encode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\"). (required)
        :param str available_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str available_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :param str pkg_version: Optional specific version (or version reference) to request. By default the latest version (or latest version matching the reference) will be returned.
        :return: V1alpha1GetAvailablePackageDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_available_package_detail_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_available_package_detail_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_available_package_detail_with_http_info(self, available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs):  # noqa: E501
        """GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_detail_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str available_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str available_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str available_package_ref_identifier: Available package identifier  The fully qualified identifier for the available package (ie. a unique name for the context). For some packaging systems (particularly those where an available package is backed by a CR) this will just be the name, but for others such as those where an available package is not backed by a CR (eg. standard helm) it may be necessary to include the repository in the name or even the repo namespace to ensure this is unique. For example two helm repositories can define an \"apache\" chart that is available globally, the names would need to encode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\"). (required)
        :param str available_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str available_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :param str pkg_version: Optional specific version (or version reference) to request. By default the latest version (or latest version matching the reference) will be returned.
        :return: V1alpha1GetAvailablePackageDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['available_package_ref_context_cluster', 'available_package_ref_context_namespace', 'available_package_ref_identifier', 'available_package_ref_plugin_name', 'available_package_ref_plugin_version', 'pkg_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_available_package_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'available_package_ref_context_cluster' is set
        if ('available_package_ref_context_cluster' not in params or
                params['available_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_context_cluster` when calling `kapp_controller_packages_service_get_available_package_detail`")  # noqa: E501
        # verify the required parameter 'available_package_ref_context_namespace' is set
        if ('available_package_ref_context_namespace' not in params or
                params['available_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_context_namespace` when calling `kapp_controller_packages_service_get_available_package_detail`")  # noqa: E501
        # verify the required parameter 'available_package_ref_identifier' is set
        if ('available_package_ref_identifier' not in params or
                params['available_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_identifier` when calling `kapp_controller_packages_service_get_available_package_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'available_package_ref_context_cluster' in params:
            path_params['availablePackageRef.context.cluster'] = params['available_package_ref_context_cluster']  # noqa: E501
        if 'available_package_ref_context_namespace' in params:
            path_params['availablePackageRef.context.namespace'] = params['available_package_ref_context_namespace']  # noqa: E501
        if 'available_package_ref_identifier' in params:
            path_params['availablePackageRef.identifier'] = params['available_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'available_package_ref_plugin_name' in params:
            query_params.append(('availablePackageRef.plugin.name', params['available_package_ref_plugin_name']))  # noqa: E501
        if 'available_package_ref_plugin_version' in params:
            query_params.append(('availablePackageRef.plugin.version', params['available_package_ref_plugin_version']))  # noqa: E501
        if 'pkg_version' in params:
            query_params.append(('pkgVersion', params['pkg_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetAvailablePackageDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_available_package_summaries(self, **kwargs):  # noqa: E501
        """GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_summaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str filter_options_query: Text query  Text query for the request
        :param list[str] filter_options_categories: Categories  Collection of categories for the request
        :param list[str] filter_options_repositories: Repositories  Collection of repositories where the packages belong to
        :param str filter_options_pkg_version: Package version  Package version for the request
        :param str filter_options_app_version: App version  Packaged app version for the request
        :param str pagination_options_page_token: Page token  The client uses this field to request a specific page of the list results.
        :param int pagination_options_page_size: Page size  Clients use this field to specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.
        :return: V1alpha1GetAvailablePackageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_available_package_summaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_available_package_summaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_available_package_summaries_with_http_info(self, **kwargs):  # noqa: E501
        """GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_summaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str filter_options_query: Text query  Text query for the request
        :param list[str] filter_options_categories: Categories  Collection of categories for the request
        :param list[str] filter_options_repositories: Repositories  Collection of repositories where the packages belong to
        :param str filter_options_pkg_version: Package version  Package version for the request
        :param str filter_options_app_version: App version  Packaged app version for the request
        :param str pagination_options_page_token: Page token  The client uses this field to request a specific page of the list results.
        :param int pagination_options_page_size: Page size  Clients use this field to specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.
        :return: V1alpha1GetAvailablePackageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace', 'filter_options_query', 'filter_options_categories', 'filter_options_repositories', 'filter_options_pkg_version', 'filter_options_app_version', 'pagination_options_page_token', 'pagination_options_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_available_package_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context_cluster' in params:
            query_params.append(('context.cluster', params['context_cluster']))  # noqa: E501
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501
        if 'filter_options_query' in params:
            query_params.append(('filterOptions.query', params['filter_options_query']))  # noqa: E501
        if 'filter_options_categories' in params:
            query_params.append(('filterOptions.categories', params['filter_options_categories']))  # noqa: E501
            collection_formats['filterOptions.categories'] = 'multi'  # noqa: E501
        if 'filter_options_repositories' in params:
            query_params.append(('filterOptions.repositories', params['filter_options_repositories']))  # noqa: E501
            collection_formats['filterOptions.repositories'] = 'multi'  # noqa: E501
        if 'filter_options_pkg_version' in params:
            query_params.append(('filterOptions.pkgVersion', params['filter_options_pkg_version']))  # noqa: E501
        if 'filter_options_app_version' in params:
            query_params.append(('filterOptions.appVersion', params['filter_options_app_version']))  # noqa: E501
        if 'pagination_options_page_token' in params:
            query_params.append(('paginationOptions.pageToken', params['pagination_options_page_token']))  # noqa: E501
        if 'pagination_options_page_size' in params:
            query_params.append(('paginationOptions.pageSize', params['pagination_options_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/availablepackages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetAvailablePackageSummariesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_available_package_versions(self, available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs):  # noqa: E501
        """GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_versions(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str available_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str available_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str available_package_ref_identifier: Available package identifier  The fully qualified identifier for the available package (ie. a unique name for the context). For some packaging systems (particularly those where an available package is backed by a CR) this will just be the name, but for others such as those where an available package is not backed by a CR (eg. standard helm) it may be necessary to include the repository in the name or even the repo namespace to ensure this is unique. For example two helm repositories can define an \"apache\" chart that is available globally, the names would need to encode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\"). (required)
        :param str available_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str available_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :param str pkg_version: Optional version reference for which full version history is required.  By default a summary of versions is returned as outlined in the response. Plugins can choose not to implement this and provide the summary only, it is provided for completeness only.
        :return: V1alpha1GetAvailablePackageVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_available_package_versions_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_available_package_versions_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_available_package_versions_with_http_info(self, available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, **kwargs):  # noqa: E501
        """GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_available_package_versions_with_http_info(available_package_ref_context_cluster, available_package_ref_context_namespace, available_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str available_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str available_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str available_package_ref_identifier: Available package identifier  The fully qualified identifier for the available package (ie. a unique name for the context). For some packaging systems (particularly those where an available package is backed by a CR) this will just be the name, but for others such as those where an available package is not backed by a CR (eg. standard helm) it may be necessary to include the repository in the name or even the repo namespace to ensure this is unique. For example two helm repositories can define an \"apache\" chart that is available globally, the names would need to encode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\"). (required)
        :param str available_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str available_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :param str pkg_version: Optional version reference for which full version history is required.  By default a summary of versions is returned as outlined in the response. Plugins can choose not to implement this and provide the summary only, it is provided for completeness only.
        :return: V1alpha1GetAvailablePackageVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['available_package_ref_context_cluster', 'available_package_ref_context_namespace', 'available_package_ref_identifier', 'available_package_ref_plugin_name', 'available_package_ref_plugin_version', 'pkg_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_available_package_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'available_package_ref_context_cluster' is set
        if ('available_package_ref_context_cluster' not in params or
                params['available_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_context_cluster` when calling `kapp_controller_packages_service_get_available_package_versions`")  # noqa: E501
        # verify the required parameter 'available_package_ref_context_namespace' is set
        if ('available_package_ref_context_namespace' not in params or
                params['available_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_context_namespace` when calling `kapp_controller_packages_service_get_available_package_versions`")  # noqa: E501
        # verify the required parameter 'available_package_ref_identifier' is set
        if ('available_package_ref_identifier' not in params or
                params['available_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `available_package_ref_identifier` when calling `kapp_controller_packages_service_get_available_package_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'available_package_ref_context_cluster' in params:
            path_params['availablePackageRef.context.cluster'] = params['available_package_ref_context_cluster']  # noqa: E501
        if 'available_package_ref_context_namespace' in params:
            path_params['availablePackageRef.context.namespace'] = params['available_package_ref_context_namespace']  # noqa: E501
        if 'available_package_ref_identifier' in params:
            path_params['availablePackageRef.identifier'] = params['available_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'available_package_ref_plugin_name' in params:
            query_params.append(('availablePackageRef.plugin.name', params['available_package_ref_plugin_name']))  # noqa: E501
        if 'available_package_ref_plugin_version' in params:
            query_params.append(('availablePackageRef.plugin.version', params['available_package_ref_plugin_version']))  # noqa: E501
        if 'pkg_version' in params:
            query_params.append(('pkgVersion', params['pkg_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetAvailablePackageVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_installed_package_detail(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_detail(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetInstalledPackageDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_installed_package_detail_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_installed_package_detail_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_installed_package_detail_with_http_info(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_detail_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetInstalledPackageDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['installed_package_ref_context_cluster', 'installed_package_ref_context_namespace', 'installed_package_ref_identifier', 'installed_package_ref_plugin_name', 'installed_package_ref_plugin_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_installed_package_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'installed_package_ref_context_cluster' is set
        if ('installed_package_ref_context_cluster' not in params or
                params['installed_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_cluster` when calling `kapp_controller_packages_service_get_installed_package_detail`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_namespace' is set
        if ('installed_package_ref_context_namespace' not in params or
                params['installed_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_namespace` when calling `kapp_controller_packages_service_get_installed_package_detail`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_identifier' is set
        if ('installed_package_ref_identifier' not in params or
                params['installed_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_identifier` when calling `kapp_controller_packages_service_get_installed_package_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installed_package_ref_context_cluster' in params:
            path_params['installedPackageRef.context.cluster'] = params['installed_package_ref_context_cluster']  # noqa: E501
        if 'installed_package_ref_context_namespace' in params:
            path_params['installedPackageRef.context.namespace'] = params['installed_package_ref_context_namespace']  # noqa: E501
        if 'installed_package_ref_identifier' in params:
            path_params['installedPackageRef.identifier'] = params['installed_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'installed_package_ref_plugin_name' in params:
            query_params.append(('installedPackageRef.plugin.name', params['installed_package_ref_plugin_name']))  # noqa: E501
        if 'installed_package_ref_plugin_version' in params:
            query_params.append(('installedPackageRef.plugin.version', params['installed_package_ref_plugin_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetInstalledPackageDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_installed_package_resource_refs(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by an installed package.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_resource_refs(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetInstalledPackageResourceRefsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_installed_package_resource_refs_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_installed_package_resource_refs_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_installed_package_resource_refs_with_http_info(self, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by an installed package.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_resource_refs_with_http_info(installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetInstalledPackageResourceRefsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['installed_package_ref_context_cluster', 'installed_package_ref_context_namespace', 'installed_package_ref_identifier', 'installed_package_ref_plugin_name', 'installed_package_ref_plugin_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_installed_package_resource_refs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'installed_package_ref_context_cluster' is set
        if ('installed_package_ref_context_cluster' not in params or
                params['installed_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_cluster` when calling `kapp_controller_packages_service_get_installed_package_resource_refs`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_namespace' is set
        if ('installed_package_ref_context_namespace' not in params or
                params['installed_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_namespace` when calling `kapp_controller_packages_service_get_installed_package_resource_refs`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_identifier' is set
        if ('installed_package_ref_identifier' not in params or
                params['installed_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_identifier` when calling `kapp_controller_packages_service_get_installed_package_resource_refs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installed_package_ref_context_cluster' in params:
            path_params['installedPackageRef.context.cluster'] = params['installed_package_ref_context_cluster']  # noqa: E501
        if 'installed_package_ref_context_namespace' in params:
            path_params['installedPackageRef.context.namespace'] = params['installed_package_ref_context_namespace']  # noqa: E501
        if 'installed_package_ref_identifier' in params:
            path_params['installedPackageRef.identifier'] = params['installed_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'installed_package_ref_plugin_name' in params:
            query_params.append(('installedPackageRef.plugin.name', params['installed_package_ref_plugin_name']))  # noqa: E501
        if 'installed_package_ref_plugin_version' in params:
            query_params.append(('installedPackageRef.plugin.version', params['installed_package_ref_plugin_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetInstalledPackageResourceRefsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_get_installed_package_summaries(self, **kwargs):  # noqa: E501
        """GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_summaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str pagination_options_page_token: Page token  The client uses this field to request a specific page of the list results.
        :param int pagination_options_page_size: Page size  Clients use this field to specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.
        :return: V1alpha1GetInstalledPackageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_get_installed_package_summaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_get_installed_package_summaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_get_installed_package_summaries_with_http_info(self, **kwargs):  # noqa: E501
        """GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_get_installed_package_summaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str pagination_options_page_token: Page token  The client uses this field to request a specific page of the list results.
        :param int pagination_options_page_size: Page size  Clients use this field to specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.
        :return: V1alpha1GetInstalledPackageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace', 'pagination_options_page_token', 'pagination_options_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_get_installed_package_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context_cluster' in params:
            query_params.append(('context.cluster', params['context_cluster']))  # noqa: E501
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501
        if 'pagination_options_page_token' in params:
            query_params.append(('paginationOptions.pageToken', params['pagination_options_page_token']))  # noqa: E501
        if 'pagination_options_page_size' in params:
            query_params.append(('paginationOptions.pageSize', params['pagination_options_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetInstalledPackageSummariesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_packages_service_update_installed_package(self, body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """UpdateInstalledPackage updates an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_update_installed_package(body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :return: V1alpha1UpdateInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_packages_service_update_installed_package_with_http_info(body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_packages_service_update_installed_package_with_http_info(body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_packages_service_update_installed_package_with_http_info(self, body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """UpdateInstalledPackage updates an installed package based on the request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_packages_service_update_installed_package_with_http_info(body, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :return: V1alpha1UpdateInstalledPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'installed_package_ref_context_cluster', 'installed_package_ref_context_namespace', 'installed_package_ref_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_packages_service_update_installed_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kapp_controller_packages_service_update_installed_package`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_cluster' is set
        if ('installed_package_ref_context_cluster' not in params or
                params['installed_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_cluster` when calling `kapp_controller_packages_service_update_installed_package`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_namespace' is set
        if ('installed_package_ref_context_namespace' not in params or
                params['installed_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_namespace` when calling `kapp_controller_packages_service_update_installed_package`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_identifier' is set
        if ('installed_package_ref_identifier' not in params or
                params['installed_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_identifier` when calling `kapp_controller_packages_service_update_installed_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installed_package_ref_context_cluster' in params:
            path_params['installedPackageRef.context.cluster'] = params['installed_package_ref_context_cluster']  # noqa: E501
        if 'installed_package_ref_context_namespace' in params:
            path_params['installedPackageRef.context.namespace'] = params['installed_package_ref_context_namespace']  # noqa: E501
        if 'installed_package_ref_identifier' in params:
            path_params['installedPackageRef.identifier'] = params['installed_package_ref_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1UpdateInstalledPackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

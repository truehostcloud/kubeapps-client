# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kubeapps_client.api_client import ApiClient


class KappControllerRepositoriesServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def kapp_controller_repositories_service_add_package_repository(self, body, **kwargs):  # noqa: E501
        """AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_add_package_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1alpha1AddPackageRepositoryRequest body: Request for AddPackageRepository (required)
        :return: V1alpha1AddPackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_add_package_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_add_package_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_add_package_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_add_package_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1alpha1AddPackageRepositoryRequest body: Request for AddPackageRepository (required)
        :return: V1alpha1AddPackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_add_package_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kapp_controller_repositories_service_add_package_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1AddPackageRepositoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_repositories_service_delete_package_repository(self, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_delete_package_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_delete_package_repository(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :param str package_repo_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str package_repo_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1DeletePackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_delete_package_repository_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_delete_package_repository_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_delete_package_repository_with_http_info(self, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_delete_package_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_delete_package_repository_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :param str package_repo_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str package_repo_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1DeletePackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_repo_ref_context_cluster', 'package_repo_ref_context_namespace', 'package_repo_ref_identifier', 'package_repo_ref_plugin_name', 'package_repo_ref_plugin_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_delete_package_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_repo_ref_context_cluster' is set
        if ('package_repo_ref_context_cluster' not in params or
                params['package_repo_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_cluster` when calling `kapp_controller_repositories_service_delete_package_repository`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_context_namespace' is set
        if ('package_repo_ref_context_namespace' not in params or
                params['package_repo_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_namespace` when calling `kapp_controller_repositories_service_delete_package_repository`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_identifier' is set
        if ('package_repo_ref_identifier' not in params or
                params['package_repo_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_identifier` when calling `kapp_controller_repositories_service_delete_package_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_repo_ref_context_cluster' in params:
            path_params['packageRepoRef.context.cluster'] = params['package_repo_ref_context_cluster']  # noqa: E501
        if 'package_repo_ref_context_namespace' in params:
            path_params['packageRepoRef.context.namespace'] = params['package_repo_ref_context_namespace']  # noqa: E501
        if 'package_repo_ref_identifier' in params:
            path_params['packageRepoRef.identifier'] = params['package_repo_ref_identifier']  # noqa: E501

        query_params = []
        if 'package_repo_ref_plugin_name' in params:
            query_params.append(('packageRepoRef.plugin.name', params['package_repo_ref_plugin_name']))  # noqa: E501
        if 'package_repo_ref_plugin_version' in params:
            query_params.append(('packageRepoRef.plugin.version', params['package_repo_ref_plugin_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1DeletePackageRepositoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_repositories_service_get_package_repository_detail(self, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_detail(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :param str package_repo_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str package_repo_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetPackageRepositoryDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_get_package_repository_detail_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_get_package_repository_detail_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_get_package_repository_detail_with_http_info(self, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_detail_with_http_info(package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :param str package_repo_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
        :param str package_repo_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1
        :return: V1alpha1GetPackageRepositoryDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_repo_ref_context_cluster', 'package_repo_ref_context_namespace', 'package_repo_ref_identifier', 'package_repo_ref_plugin_name', 'package_repo_ref_plugin_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_get_package_repository_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_repo_ref_context_cluster' is set
        if ('package_repo_ref_context_cluster' not in params or
                params['package_repo_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_cluster` when calling `kapp_controller_repositories_service_get_package_repository_detail`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_context_namespace' is set
        if ('package_repo_ref_context_namespace' not in params or
                params['package_repo_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_namespace` when calling `kapp_controller_repositories_service_get_package_repository_detail`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_identifier' is set
        if ('package_repo_ref_identifier' not in params or
                params['package_repo_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_identifier` when calling `kapp_controller_repositories_service_get_package_repository_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_repo_ref_context_cluster' in params:
            path_params['packageRepoRef.context.cluster'] = params['package_repo_ref_context_cluster']  # noqa: E501
        if 'package_repo_ref_context_namespace' in params:
            path_params['packageRepoRef.context.namespace'] = params['package_repo_ref_context_namespace']  # noqa: E501
        if 'package_repo_ref_identifier' in params:
            path_params['packageRepoRef.identifier'] = params['package_repo_ref_identifier']  # noqa: E501

        query_params = []
        if 'package_repo_ref_plugin_name' in params:
            query_params.append(('packageRepoRef.plugin.name', params['package_repo_ref_plugin_name']))  # noqa: E501
        if 'package_repo_ref_plugin_version' in params:
            query_params.append(('packageRepoRef.plugin.version', params['package_repo_ref_plugin_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetPackageRepositoryDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_repositories_service_get_package_repository_permissions(self, context_cluster, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_permissions(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1GetPackageRepositoryPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_get_package_repository_permissions_with_http_info(context_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_get_package_repository_permissions_with_http_info(context_cluster, **kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_get_package_repository_permissions_with_http_info(self, context_cluster, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_permissions_with_http_info(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1GetPackageRepositoryPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_get_package_repository_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `kapp_controller_repositories_service_get_package_repository_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501

        query_params = []
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories/c/{context.cluster}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetPackageRepositoryPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_repositories_service_get_package_repository_summaries(self, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_summaries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_summaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1GetPackageRepositorySummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_get_package_repository_summaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_get_package_repository_summaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_get_package_repository_summaries_with_http_info(self, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_get_package_repository_summaries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_get_package_repository_summaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed.
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1GetPackageRepositorySummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_get_package_repository_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context_cluster' in params:
            query_params.append(('context.cluster', params['context_cluster']))  # noqa: E501
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetPackageRepositorySummariesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kapp_controller_repositories_service_update_package_repository(self, body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_update_package_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_update_package_repository(body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :return: V1alpha1UpdatePackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kapp_controller_repositories_service_update_package_repository_with_http_info(body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.kapp_controller_repositories_service_update_package_repository_with_http_info(body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs)  # noqa: E501
            return data

    def kapp_controller_repositories_service_update_package_repository_with_http_info(self, body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, **kwargs):  # noqa: E501
        """kapp_controller_repositories_service_update_package_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kapp_controller_repositories_service_update_package_repository_with_http_info(body, package_repo_ref_context_cluster, package_repo_ref_context_namespace, package_repo_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str package_repo_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str package_repo_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str package_repo_ref_identifier: The fully qualified identifier for the repository (i.e. a unique name for the context). (required)
        :return: V1alpha1UpdatePackageRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'package_repo_ref_context_cluster', 'package_repo_ref_context_namespace', 'package_repo_ref_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kapp_controller_repositories_service_update_package_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kapp_controller_repositories_service_update_package_repository`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_context_cluster' is set
        if ('package_repo_ref_context_cluster' not in params or
                params['package_repo_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_cluster` when calling `kapp_controller_repositories_service_update_package_repository`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_context_namespace' is set
        if ('package_repo_ref_context_namespace' not in params or
                params['package_repo_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_context_namespace` when calling `kapp_controller_repositories_service_update_package_repository`")  # noqa: E501
        # verify the required parameter 'package_repo_ref_identifier' is set
        if ('package_repo_ref_identifier' not in params or
                params['package_repo_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `package_repo_ref_identifier` when calling `kapp_controller_repositories_service_update_package_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_repo_ref_context_cluster' in params:
            path_params['packageRepoRef.context.cluster'] = params['package_repo_ref_context_cluster']  # noqa: E501
        if 'package_repo_ref_context_namespace' in params:
            path_params['packageRepoRef.context.namespace'] = params['package_repo_ref_context_namespace']  # noqa: E501
        if 'package_repo_ref_identifier' in params:
            path_params['packageRepoRef.identifier'] = params['package_repo_ref_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/kapp_controller/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1UpdatePackageRepositoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Kubeapps API

    [![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)   [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.   Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.  #### Developer Documentation  - The [Kubeapps Architecture Overview](https://kubeapps.dev/docs/latest/background/architecture/).  - The [Kubeapps Developer Documentation](https://kubeapps.dev/docs/latest/reference/developer/) for instructions on setting up the developer environment for developing on Kubeapps and its components.  - The [Kubeapps Build Guide](https://kubeapps.dev/docs/latest/reference/developer/build/) for instructions on setting up the build environment and building Kubeapps from source.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResourcesServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resources_service_can_i(self, context_cluster, **kwargs):  # noqa: E501
        """resources_service_can_i  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_can_i(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str group: Group API Group of the Resource.  \"*\" means all. +optional
        :param str resource: Resource is one of the existing resource types.  \"*\" means all. +optional
        :param str verb: Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all. +optional
        :return: V1alpha1CanIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_can_i_with_http_info(context_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_can_i_with_http_info(context_cluster, **kwargs)  # noqa: E501
            return data

    def resources_service_can_i_with_http_info(self, context_cluster, **kwargs):  # noqa: E501
        """resources_service_can_i  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_can_i_with_http_info(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :param str group: Group API Group of the Resource.  \"*\" means all. +optional
        :param str resource: Resource is one of the existing resource types.  \"*\" means all. +optional
        :param str verb: Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all. +optional
        :return: V1alpha1CanIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace', 'group', 'resource', 'verb']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_can_i" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_can_i`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501

        query_params = []
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'resource' in params:
            query_params.append(('resource', params['resource']))  # noqa: E501
        if 'verb' in params:
            query_params.append(('verb', params['verb']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/can-i', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1CanIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_check_namespace_exists(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_check_namespace_exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_check_namespace_exists(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1CheckNamespaceExistsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_check_namespace_exists_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_check_namespace_exists_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
            return data

    def resources_service_check_namespace_exists_with_http_info(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_check_namespace_exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_check_namespace_exists_with_http_info(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1CheckNamespaceExistsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_check_namespace_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_check_namespace_exists`")  # noqa: E501
        # verify the required parameter 'context_namespace' is set
        if ('context_namespace' not in params or
                params['context_namespace'] is None):
            raise ValueError("Missing the required parameter `context_namespace` when calling `resources_service_check_namespace_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501
        if 'context_namespace' in params:
            path_params['context.namespace'] = params['context_namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1CheckNamespaceExistsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_create_namespace(self, context_cluster, **kwargs):  # noqa: E501
        """resources_service_create_namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_create_namespace(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1CreateNamespaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_create_namespace_with_http_info(context_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_create_namespace_with_http_info(context_cluster, **kwargs)  # noqa: E501
            return data

    def resources_service_create_namespace_with_http_info(self, context_cluster, **kwargs):  # noqa: E501
        """resources_service_create_namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_create_namespace_with_http_info(context_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need.
        :return: V1alpha1CreateNamespaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_create_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_create_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501

        query_params = []
        if 'context_namespace' in params:
            query_params.append(('context.namespace', params['context_namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1CreateNamespaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_create_secret(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_create_secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_create_secret(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str type: Type  The type of the secret. Valid values are defined by the Type enumeration.
        :param str name: Name  The name of the secret.
        :return: V1alpha1CreateSecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_create_secret_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_create_secret_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
            return data

    def resources_service_create_secret_with_http_info(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_create_secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_create_secret_with_http_info(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str type: Type  The type of the secret. Valid values are defined by the Type enumeration.
        :param str name: Name  The name of the secret.
        :return: V1alpha1CreateSecretResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace', 'type', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_create_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_create_secret`")  # noqa: E501
        # verify the required parameter 'context_namespace' is set
        if ('context_namespace' not in params or
                params['context_namespace'] is None):
            raise ValueError("Missing the required parameter `context_namespace` when calling `resources_service_create_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501
        if 'context_namespace' in params:
            path_params['context.namespace'] = params['context_namespace']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/secrets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1CreateSecretResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_get_namespace_names(self, cluster, **kwargs):  # noqa: E501
        """resources_service_get_namespace_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_namespace_names(cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster: Cluster  The context for which the namespace names are being fetched.  The service will attempt to list namespaces across the cluster, first with the users credential, then with a configured service account if available. (required)
        :return: V1alpha1GetNamespaceNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_get_namespace_names_with_http_info(cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_get_namespace_names_with_http_info(cluster, **kwargs)  # noqa: E501
            return data

    def resources_service_get_namespace_names_with_http_info(self, cluster, **kwargs):  # noqa: E501
        """resources_service_get_namespace_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_namespace_names_with_http_info(cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster: Cluster  The context for which the namespace names are being fetched.  The service will attempt to list namespaces across the cluster, first with the users credential, then with a configured service account if available. (required)
        :return: V1alpha1GetNamespaceNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_get_namespace_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `resources_service_get_namespace_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{cluster}/namespacenames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetNamespaceNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_get_resources(self, installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """resources_service_get_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_resources(installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`. (required)
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1 (required)
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param bool watch: Watch  When true, this will cause the stream to remain open with updated resources being sent as events are received from the Kubernetes API server.
        :return: StreamResultOfV1alpha1GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_get_resources_with_http_info(installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_get_resources_with_http_info(installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs)  # noqa: E501
            return data

    def resources_service_get_resources_with_http_info(self, installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, **kwargs):  # noqa: E501
        """resources_service_get_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_resources_with_http_info(installed_package_ref_plugin_name, installed_package_ref_plugin_version, installed_package_ref_context_cluster, installed_package_ref_context_namespace, installed_package_ref_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installed_package_ref_plugin_name: Plugin name  The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`. (required)
        :param str installed_package_ref_plugin_version: Plugin version  The version of the plugin, such as v1alpha1 (required)
        :param str installed_package_ref_context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str installed_package_ref_context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :param str installed_package_ref_identifier: The fully qualified identifier for the installed package (ie. a unique name for the context). (required)
        :param bool watch: Watch  When true, this will cause the stream to remain open with updated resources being sent as events are received from the Kubernetes API server.
        :return: StreamResultOfV1alpha1GetResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['installed_package_ref_plugin_name', 'installed_package_ref_plugin_version', 'installed_package_ref_context_cluster', 'installed_package_ref_context_namespace', 'installed_package_ref_identifier', 'watch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_get_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'installed_package_ref_plugin_name' is set
        if ('installed_package_ref_plugin_name' not in params or
                params['installed_package_ref_plugin_name'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_plugin_name` when calling `resources_service_get_resources`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_plugin_version' is set
        if ('installed_package_ref_plugin_version' not in params or
                params['installed_package_ref_plugin_version'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_plugin_version` when calling `resources_service_get_resources`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_cluster' is set
        if ('installed_package_ref_context_cluster' not in params or
                params['installed_package_ref_context_cluster'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_cluster` when calling `resources_service_get_resources`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_context_namespace' is set
        if ('installed_package_ref_context_namespace' not in params or
                params['installed_package_ref_context_namespace'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_context_namespace` when calling `resources_service_get_resources`")  # noqa: E501
        # verify the required parameter 'installed_package_ref_identifier' is set
        if ('installed_package_ref_identifier' not in params or
                params['installed_package_ref_identifier'] is None):
            raise ValueError("Missing the required parameter `installed_package_ref_identifier` when calling `resources_service_get_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installed_package_ref_plugin_name' in params:
            path_params['installedPackageRef.plugin.name'] = params['installed_package_ref_plugin_name']  # noqa: E501
        if 'installed_package_ref_plugin_version' in params:
            path_params['installedPackageRef.plugin.version'] = params['installed_package_ref_plugin_version']  # noqa: E501
        if 'installed_package_ref_context_cluster' in params:
            path_params['installedPackageRef.context.cluster'] = params['installed_package_ref_context_cluster']  # noqa: E501
        if 'installed_package_ref_context_namespace' in params:
            path_params['installedPackageRef.context.namespace'] = params['installed_package_ref_context_namespace']  # noqa: E501
        if 'installed_package_ref_identifier' in params:
            path_params['installedPackageRef.identifier'] = params['installed_package_ref_identifier']  # noqa: E501

        query_params = []
        if 'watch' in params:
            query_params.append(('watch', params['watch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreamResultOfV1alpha1GetResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_get_secret_names(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_get_secret_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_secret_names(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1GetSecretNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_get_secret_names_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_get_secret_names_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
            return data

    def resources_service_get_secret_names_with_http_info(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_get_secret_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_secret_names_with_http_info(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1GetSecretNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_get_secret_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_get_secret_names`")  # noqa: E501
        # verify the required parameter 'context_namespace' is set
        if ('context_namespace' not in params or
                params['context_namespace'] is None):
            raise ValueError("Missing the required parameter `context_namespace` when calling `resources_service_get_secret_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501
        if 'context_namespace' in params:
            path_params['context.namespace'] = params['context_namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/secretnames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetSecretNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_service_get_service_account_names(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_get_service_account_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_service_account_names(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1GetServiceAccountNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_service_get_service_account_names_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_service_get_service_account_names_with_http_info(context_cluster, context_namespace, **kwargs)  # noqa: E501
            return data

    def resources_service_get_service_account_names_with_http_info(self, context_cluster, context_namespace, **kwargs):  # noqa: E501
        """resources_service_get_service_account_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_service_get_service_account_names_with_http_info(context_cluster, context_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str context_cluster: Cluster  A cluster name can be provided to target a specific cluster if multiple clusters are configured, otherwise all clusters will be assumed. (required)
        :param str context_namespace: Namespace  A namespace must be provided if the context of the operation is for a resource or resources in a particular namespace. For requests to list items, not including a namespace here implies that the context for the request is everything the requesting user can read, though the result can be filtered by any filtering options of the request. Plugins may choose to return Unimplemented for some queries for which we do not yet have a need. (required)
        :return: V1alpha1GetServiceAccountNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_cluster', 'context_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_service_get_service_account_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_cluster' is set
        if ('context_cluster' not in params or
                params['context_cluster'] is None):
            raise ValueError("Missing the required parameter `context_cluster` when calling `resources_service_get_service_account_names`")  # noqa: E501
        # verify the required parameter 'context_namespace' is set
        if ('context_namespace' not in params or
                params['context_namespace'] is None):
            raise ValueError("Missing the required parameter `context_namespace` when calling `resources_service_get_service_account_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'context_cluster' in params:
            path_params['context.cluster'] = params['context_cluster']  # noqa: E501
        if 'context_namespace' in params:
            path_params['context.namespace'] = params['context_namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/serviceaccountnames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1GetServiceAccountNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
